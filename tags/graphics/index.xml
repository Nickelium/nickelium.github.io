<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>graphics on Tri Tran</title>
    <link>https://nickelium.github.io/tags/graphics/</link>
    <description>Recent content in graphics on Tri Tran</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 12 Aug 2019 21:16:07 +0200</lastBuildDate>
    
	<atom:link href="https://nickelium.github.io/tags/graphics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IRadiance - RayTracer</title>
      <link>https://nickelium.github.io/projects/raytracer/</link>
      <pubDate>Mon, 12 Aug 2019 21:16:07 +0200</pubDate>
      
      <guid>https://nickelium.github.io/projects/raytracer/</guid>
      <description>IRadiance Engine is an open-source software raytraced renderer written in C++11. This project is still in development, more features are about to come!
Previously I&amp;rsquo;ve written a raytracer based on the implementation of Ray Tracing in One Weekend, from Peter Shirley and Paul Heckbert&amp;rsquo;s business card raytracer. What I did back then was writing the output to a simple image format, .PPM, which requires a specialized software to view the image.</description>
    </item>
    
    <item>
      <title>Radiance - Graphics Engine</title>
      <link>https://nickelium.github.io/projects/graphics_engine/</link>
      <pubDate>Mon, 05 Aug 2019 21:16:07 +0200</pubDate>
      
      <guid>https://nickelium.github.io/projects/graphics_engine/</guid>
      <description>Radiance Engine is a graphics engine built currently on top of OpenGL but with the intent to eventually support more APIs. This project is still in development, more features are about to come!
Initially this project was mostly intended as a practical exercise to reinforce the things I&amp;rsquo;ve learned on LearnOpenGL. The goal has evolved into an API agnostic renderer with a clear software architecture. Next up is providing a simple but nice API to the user.</description>
    </item>
    
    <item>
      <title>Rasterizer</title>
      <link>https://nickelium.github.io/projects/rasterizer/</link>
      <pubDate>Fri, 12 Jul 2019 12:32:46 +0200</pubDate>
      
      <guid>https://nickelium.github.io/projects/rasterizer/</guid>
      <description>This is a simple realtime software renderer that emulates the typical graphics pipeline. Therefore, it doesn&amp;rsquo;t use the help of any Graphics API such as D3D11/12, OpenGL or Vulkan. The software is built mostly from &amp;lsquo;scratch&amp;rsquo;, written in standard C++98/C++11. To be more precise, the renderer tries to mimic the OpenGL pipeline by providing its implementation instead of relying on the GPU.
The goal of this project is to learn and uncover what&amp;rsquo;s behind the blackbox of a Graphics API that is often untold (to me at least) and taken as it is.</description>
    </item>
    
  </channel>
</rss>